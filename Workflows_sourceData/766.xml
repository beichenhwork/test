<?xml version="1.0" encoding="UTF-8"?><s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">  <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:b056bdcc-1098-439f-b3ee-8f714c4a6271" author="" title="fgate" />  <s:processor name="url" boring="true">    <s:stringconstant>http://ui.egee.creatis.insa-lyon.fr:8080/fgate/fgate.ph</s:stringconstant>  </s:processor>  <s:processor name="merge_config" boring="true">    <s:stringconstant>lfn://lfc-biomed.in2p3.fr/grid/biomed/creatis/fgate/gasw/merge.xml</s:stringconstant>  </s:processor>  <s:processor name="testInputFormat">    <s:beanshell critical="true">      <s:scriptvalue>if(!input.endsWith(".tgz") &amp;&amp; !input.endsWith(".tar.gz") &amp;&amp; !input.endsWith(".tar") &amp;&amp; !input.endsWith(".zip"))	throw(new Exception("Bad input format: "+input+" (must end with .tgz, .tar.gz, .tar or .zip)"));</s:scriptvalue>      <s:beanshellinputlist>        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>      </s:beanshellinputlist>      <s:beanshelloutputlist />      <s:dependencies s:classloader="iteration" />    </s:beanshell>  </s:processor>  <s:processor name="wrapperType" boring="true">    <s:stringconstant>stat</s:stringconstant>  </s:processor>  <s:processor name="fileName" boring="true">    <s:stringconstant>stopMonitoring.txt</s:stringconstant>  </s:processor>  <s:processor name="gate_config" boring="true">    <s:stringconstant>lfn://lfc-biomed.in2p3.fr/grid/biomed/creatis/fgate/gasw/fgate.xml</s:stringconstant>  </s:processor>  <s:processor name="monitorNParticles">    <s:beanshell>      <s:scriptvalue>try{ 	int nTot = Integer.parseInt(totalNPart);	int currentNPart = 0 ;	File stopMonitor = new File(fileStop);	while(nTot &gt; currentNPart &amp;&amp; !stopMonitor.exists()){ 	    BufferedReader br = new BufferedReader(new FileReader(new File("./jobs.vljids")));            String s = "";	    int totalNPart_ = 0;                        while((s=br.readLine())!=null){                String[] elements = s.split(":",4);                if(elements.length!=4){                    System.out.println("[monitorNParticles] Wrong job id format: "+s);                }                else{                    String   dir=elements[2];                    String file=(new File(elements[3]).getName());                    String fileName = dir+"/out/"+file+".std.out";                    System.out.println("[monitorNParticles] Reading "+fileName);                    try{                        File f = new File(fileName);                        BufferedReader brr = new BufferedReader(new FileReader(fileName));                        String ss = "";                        int tempNPart = 0;                        int i =0;                        while((ss=brr.readLine())!=null){                            i++;                            //                      System.out.println(ss);                            if(ss.startsWith("# NumberOfEvents =")){                                String[] el = ss.split("= ",2);                                if(el.length!=2){                                    System.out.println("[monitorNParticles] Warning: wrong output line format at line "+i+": "+ss);                                }                                else{				    el[1]=el[1].replace(" ","").trim();				    if(!el[1].equals("")){	                                    int n = Integer.parseInt(el[1]);        	                            if(tempNPart &gt; n)                	                        System.out.println("[monitorNParticles] Inconsistent gate log at line "+i+": "+tempNPart+" &gt; "+n);                        	            else                                	        tempNPart= n;				    }                                }                            }                        }                        System.out.println("[monitorNParticles] "+tempNPart+" particles simulated in "+fileName);			String shFile = dir+"/failed/"+file;			File testFile = new File(shFile);			if(testFile.exists()){				System.out.println("[monitorNParticles] "+shFile+" is a failed job: ignoring particles");				}			else{	                        System.out.println("[monitorNParticles] "+shFile+" is not a failed job: adding particles");					totalNPart_ += tempNPart;			}                        tempNPart=0;                    }                    catch(FileNotFoundException e){                        System.out.println("[monitorNParticles] File "+fileName+ " does not exist: considering that no particle has been simulated by this task yet.");                    }                }            }	currentNPart = totalNPart_;        System.out.println("[monitorNParticles] Current number of particles: "+currentNPart);	FileWriter fw = new FileWriter("npart.txt");	fw.write(currentNPart.toString());	fw.close();	Thread.currentThread().sleep(Integer.parseInt(sleepTime)*1000);        }	if(stopMonitor.exists())		System.out.println("[monitorNParticles] file "+fileStop+" exists");	System.out.println("[monitorNParticles] Current number of particles is "+currentNPart);		System.out.println("[monitorNParticles] Stopping monitoring");	}        catch(Exception e){	  System.out.println("[monitorNParticles] Error: "+e.getMessage());	e.printStackTrace();        }</s:scriptvalue>      <s:beanshellinputlist>        <s:beanshellinput s:syntactictype="'text/plain'">totalNPart</s:beanshellinput>        <s:beanshellinput s:syntactictype="'text/plain'">fileStop</s:beanshellinput>        <s:beanshellinput s:syntactictype="'text/plain'">sleepTime</s:beanshellinput>      </s:beanshellinputlist>      <s:beanshelloutputlist />      <s:dependencies s:classloader="iteration" />    </s:beanshell>  </s:processor>  <s:processor name="stopNParticlesMonitoring">    <s:beanshell>      <s:scriptvalue>(new File(file)).createNewFile();</s:scriptvalue>      <s:beanshellinputlist>        <s:beanshellinput s:syntactictype="'text/plain'">file</s:beanshellinput>      </s:beanshellinputlist>      <s:beanshelloutputlist />      <s:dependencies s:classloader="iteration" />    </s:beanshell>  </s:processor>  <s:processor name="getOutputDir">    <s:beanshell>      <s:scriptvalue>output_lfn=new File(input_tgz_lfn).getParent()+"/output";</s:scriptvalue>      <s:beanshellinputlist>        <s:beanshellinput s:syntactictype="'text/plain'">input_tgz_lfn</s:beanshellinput>      </s:beanshellinputlist>      <s:beanshelloutputlist>        <s:beanshelloutput s:syntactictype="'text/plain'">output_lfn</s:beanshelloutput>      </s:beanshelloutputlist>      <s:dependencies s:classloader="iteration" />    </s:beanshell>  </s:processor>  <s:processor name="getSeed">    <s:beanshell>      <s:scriptvalue>if(Integer.parseInt(in) &gt;= Integer.parseInt(max)){	throw new Exception("Max number of seed ("+max+") has been reached");}else	seed=Integer.parseInt(in)+1;</s:scriptvalue>      <s:beanshellinputlist>        <s:beanshellinput s:syntactictype="'text/plain'">max</s:beanshellinput>      </s:beanshellinputlist>      <s:beanshelloutputlist>        <s:beanshelloutput s:syntactictype="'text/plain'">seed</s:beanshelloutput>      </s:beanshelloutputlist>      <s:dependencies s:classloader="iteration" />    </s:beanshell>  </s:processor>  <s:processor name="getFGateMonitoringScript">    <s:beanshell>      <s:scriptvalue>Runtime rt = Runtime.getRuntime();        String [] cmd1 = new String [4];        cmd1[0] = "wget";        cmd1[1] = url;	cmd1[2] = "--output-document";	cmd1[3] = "fgate.php";        Process p1 = rt.exec(cmd1);        p1.waitFor();</s:scriptvalue>      <s:beanshellinputlist>        <s:beanshellinput s:syntactictype="'text/plain'">url</s:beanshellinput>      </s:beanshellinputlist>      <s:beanshelloutputlist />      <s:dependencies s:classloader="iteration" />    </s:beanshell>  </s:processor>  <s:processor name="createOutputDir">    <s:beanshell critical="true">      <s:scriptvalue>lfnDir=lfnDir.replace("lfn://","");        lfnDir=lfnDir.replace("lfn:/","");	lfnDir=lfnDir.replaceFirst("[a-z,A-Z,0-9,.,\\-,_]*/","/");        System.out.println("[createOutputDir] Directory to create: "+lfnDir );        Runtime rt = Runtime.getRuntime();        System.out.println("[createOutputDir] Testing existence of "+lfnDir);        String [] cmd1 = new String [3];        cmd1[0]="lfc-ls";        cmd1[1]="-d";        cmd1[2]= lfnDir;        Process p1 = rt.exec(cmd1);        p1.waitFor();        if(p1.exitValue()!=0){            System.out.println("[createOutputDir] Directory "+lfnDir+" does not exist: creating it");            cmd1[0] = "lfc-mkdir";            cmd1[1]="-p";            p1 = rt.exec(cmd1);            p1.waitFor();            if(p1.exitValue()!=0){                throw(new Exception("[createOutputDir] Unable to create directory "+lfnDir));            }        }        else            System.out.println("[createOutputDir] Directory "+lfnDir+" already exists");</s:scriptvalue>      <s:beanshellinputlist>        <s:beanshellinput s:syntactictype="'text/plain'">lfnDir</s:beanshellinput>      </s:beanshellinputlist>      <s:beanshelloutputlist />      <s:dependencies s:classloader="iteration" />    </s:beanshell>  </s:processor>  <s:processor name="gate" workers="10">    <s:description>Service definition of function ns__GASWexecution</s:description>    <s:arbitrarywsdl>      <s:wsdl>http://egee1.unice.fr/wsdl/gasw_service_10_6.wsdl</s:wsdl>      <s:operation>GASWexecution</s:operation>    </s:arbitrarywsdl>  </s:processor>  <s:processor name="merge">    <s:description>Service definition of function ns__GASWexecution</s:description>    <s:arbitrarywsdl>      <s:wsdl>http://egee1.unice.fr/wsdl/gasw_service.wsdl</s:wsdl>      <s:operation>GASWexecution</s:operation>    </s:arbitrarywsdl>  </s:processor>  <s:processor name="getNGateTask">    <s:description>Service definition of function ns__getNGateTask</s:description>    <s:arbitrarywsdl>      <s:wsdl>http://ui.egee.creatis.insa-lyon.fr:8080/wsdl/gateTask_service.wsdl</s:wsdl>      <s:operation>getNGateTask</s:operation>    </s:arbitrarywsdl>  </s:processor>  <s:link source="fgate_release_tgz" sink="gate:input0" />  <s:link source="fgate_release_tgz" sink="testInputFormat:input" />  <s:link source="nParticles" sink="monitorNParticles:totalNPart" />  <s:link source="gate_config:value" sink="gate:config-file" />  <s:link source="input_tgz" sink="gate:input1" />  <s:link source="input_tgz" sink="getOutputDir:input_tgz_lfn" />  <s:link source="input_tgz" sink="testInputFormat:input" />  <s:link source="merge_release_tgz" sink="merge:input0" />  <s:link source="getOutputDir:output_lfn" sink="createOutputDir:lfnDir" />  <s:link source="getSeed:seed" sink="gate:input2" />  <s:link source="mac_file_name" sink="gate:input4" />  <s:link source="fileName:value" sink="monitorNParticles:fileStop" />  <s:link source="fileName:value" sink="stopNParticlesMonitoring:file" />  <s:link source="getNGateTask:nTasks" sink="gate:input3" />  <s:link source="getNGateTask:nTasks" sink="getSeed:max" />  <s:link source="merge_config:value" sink="merge:config-file" />  <s:link source="merge_release_tgz" sink="testInputFormat:input" />  <s:link source="time_estimation" sink="getNGateTask:cpuTimeEstimation" />  <s:link source="getNGateTask:stopOnScriptSleepTime" sink="gate:input5" />  <s:link source="getNGateTask:stopOnScriptSleepTime" sink="monitorNParticles:sleepTime" />  <s:link source="input_tgz" sink="merge:input1" />  <s:link source="gate:result0" sink="output_directory" />  <s:link source="merge:result0" sink="merged_results" />  <s:link source="url:value" sink="getFGateMonitoringScript:url" />  <s:link source="wrapperType:value" sink="gate:input7" />  <s:source name="mac_file_name" />  <s:source name="input_tgz" />  <s:source name="fgate_release_tgz" />  <s:source name="merge_release_tgz" />  <s:source name="time_estimation" />  <s:source name="nParticles" />  <s:sink name="output_directory" />  <s:sink name="merged_results" />  <s:coordination name="merge_BLOCKON_gate">    <s:condition>      <s:state>Completed</s:state>      <s:target>gate</s:target>    </s:condition>    <s:action>      <s:target>merge</s:target>      <s:statechange>        <s:from>Scheduled</s:from>        <s:to>Running</s:to>      </s:statechange>    </s:action>  </s:coordination>  <s:coordination name="gate_BLOCKON_testInputFormat">    <s:condition>      <s:state>Completed</s:state>      <s:target>testInputFormat</s:target>    </s:condition>    <s:action>      <s:target>gate</s:target>      <s:statechange>        <s:from>Scheduled</s:from>        <s:to>Running</s:to>      </s:statechange>    </s:action>  </s:coordination>  <s:coordination name="gate_BLOCKON_createOutputDir">    <s:condition>      <s:state>Completed</s:state>      <s:target>createOutputDir</s:target>    </s:condition>    <s:action>      <s:target>gate</s:target>      <s:statechange>        <s:from>Scheduled</s:from>        <s:to>Running</s:to>      </s:statechange>    </s:action>  </s:coordination>  <s:coordination name="stopNParticlesMonitoring_BLOCKON_gate">    <s:condition>      <s:state>Completed</s:state>      <s:target>gate</s:target>    </s:condition>    <s:action>      <s:target>stopNParticlesMonitoring</s:target>      <s:statechange>        <s:from>Scheduled</s:from>        <s:to>Running</s:to>      </s:statechange>    </s:action>  </s:coordination></s:scufl>