<?xml version="1.0" encoding="UTF-8"?><workflow uri="http://www.myexperiment.org/workflow.xml?id=105" resource="http://www.myexperiment.org/workflows/105" id="105" version="1">  <id>105</id>  <title>TestIteratorStrategy_withNesting</title>  <description>Implementation of the iteration workaround by Tom Oin conform the Q&amp;A below. The nested workflow 'NestedProcessor' is called that to conform to Tom's explanation. For an alternative solution using a java beanshell to clone list items see 'TestIteratorStrategy_withCloning. This workflow implements the following Q&amp;A:Marco Roos wrote:&gt; Dear Taverna user,&gt;&gt; Issue 1: Complex iteration&gt;&gt;     I would like to perform an iteration including a dot product between&gt;     a list and a list of lists; example:&gt;     Input:&gt;&gt;         [1]&gt;         [A,B,C]&gt;         [[a,b],[c,d],[e,f]]&gt;&gt;     Desired output:&gt;&gt;         [1Aa, 1Ab, 1Bc, 1Bd, 1Ce, 1Cf]&gt;&gt;     Is this possible? If so, how can I achieve this?Yes, but not directly. This is actually the reason for the new T2 feature called 'staged iteration'. The issue is that assuming you iterate down to single items (which appears to be the case) you want to go half way with a dot product and then use a cross product. As the iteration strategies always (in the current code) drill down to the final thing you're asking for you can't do this, at least you can't do it without a trick...So... the trick :First off the [1] is a red herring, that's the easy bit! it doesn't matter where you put that in as it'll always be added onto every single job.So you now have a list and a list of lists, you want to combine item 'n' in the first list with all the items of list 'n' in the second. Firstly you'll need a nested workflow into which you put your processor, the trick being that you also put in an 'echo list' operation. Connect the echo list output to the input of your processor being fed needing the list of lists and the echo list input to a workflow input. Connect the other input (the list) of your processor to a workflow input. The workflow inputs will have type of 'single item' and 'list' as the workflow inputs copy the types of the inputs they're connected to.It should be obvious that if you give this nested workflow the inputs 'A' and [a,b] it'll iterate and give you [f(A*a),f(A*b]. Also note that now the nested workflow mismatches by the same level on both inputs - it has one input with a single item type which you'll feed it a list and another of a list where you feed it a list of lists. This means you can set a dot iteration strategy over the nested workflow with the cross product (default) iteration strategy over the processor within it.This nested workflow will now produce the result you want; it will be called three times with :[A*[a,b], B*[c,d], C*[e,f]]Each one of these then creates a cross product iteration within the nested workflow, so the output is :[f(A*a),f(A*b)],[f(B*c),f(B*d)],[f(C*e),f(C*f)]]Passing the output through a list flatten operation then gives you (leaving out the 'F(x)' and replacing with 'x') :[Aa,Ab,Bc,Bd,Ce,Cf] which is what I believe you wanted? :) Adding the [1] bit in is easy from there!We actually did this exact thing some time ago for Paul, he had a structure he was viewing as two lists of directories where the lists were the same length but the directories could have any number of items in, he wanted a comparison between every item in directory 'n' from list 1 and every item in directory 'n' from list 2.Hope that helps, if you were wondering why we have a superficially pointless 'echo list' local worker now you know :)Tom</description>  <type resource="http://www.myexperiment.org/content_types/1" uri="http://www.myexperiment.org/type.xml?id=1" id="1">Taverna 1</type>  <uploader resource="http://www.myexperiment.org/users/18" uri="http://www.myexperiment.org/user.xml?id=18" id="18">Marco Roos</uploader>  <created-at>2007-11-29 15:31:32 UTC</created-at>  <preview>http://www.myexperiment.org/workflows/105/versions/1/previews/full</preview>  <svg>http://www.myexperiment.org/workflows/105/versions/1/previews/svg</svg>  <license-type resource="http://www.myexperiment.org/licenses/2" uri="http://www.myexperiment.org/license.xml?id=2" id="2">by-sa</license-type>  <content-uri>https://myexperiment.org/workflows/105/download/TestIteratorStrategy_withNesting-v.xml</content-uri>  <content-type>application/vnd.taverna.scufl+xml</content-type>  <tags>    <tag uri="http://www.myexperiment.org/tag.xml?id=522" resource="http://www.myexperiment.org/tags/522" id="522">VL-e</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=611" resource="http://www.myexperiment.org/tags/611" id="611">biorange_nl</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=539" resource="http://www.myexperiment.org/tags/539" id="539">utility</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=652" resource="http://www.myexperiment.org/tags/652" id="652">iteration</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=73" resource="http://www.myexperiment.org/tags/73" id="73">clone</tag>  </tags></workflow>