<?xml version="1.0" encoding="UTF-8"?><workflow uri="http://www.myexperiment.org/workflow.xml?id=185" resource="http://www.myexperiment.org/workflows/185" id="185" version="1">  <id>185</id>  <title>Staged iteration strategy</title>  <description>&lt;p&gt;Consider two lists &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt;, of equal size 3.&#13;&lt;code&gt;A[1]&lt;/code&gt; corresponds to &lt;code&gt;B[1]&lt;/code&gt;, &lt;code&gt;A[2]&lt;/code&gt; to&#13;&lt;code&gt;B[2]&lt;/code&gt;, etc, for instance &lt;em&gt;A&lt;/em&gt; are image scans from&#13;2007 and &lt;em&gt;B&lt;/em&gt; from 2008, and the index indicates the patient&#13;number.&lt;/p&gt;&#13;&#13;&lt;pre&gt;&#13;A = [a0, a1, a2]&#13;B = [b0, b1, b2]&#13;&lt;/pre&gt;&#13;&#13;&lt;p&gt;&#13;There's then two lists of possible parameters &lt;em&gt;P&lt;/em&gt; and &lt;em&gt;Q&lt;/em&gt;,&#13;of different lengths, &lt;em&gt;P&lt;/em&gt; has 2 and &lt;em&gt;Q&lt;/em&gt; has 4 items.&lt;/p&gt;&#13;&lt;pre&gt;&#13;P = [p0, p1]&#13;Q = [q0, q1, q2, q3]&#13;&lt;/pre&gt;&#13;&#13;&lt;p&gt;&#13;Each of the &lt;em&gt;A&lt;/em&gt; items should be processed in &lt;em&gt;ap&lt;/em&gt; using&#13;each of the &lt;em&gt;P&lt;/em&gt; parameters, and each of the &lt;em&gt;B&lt;/em&gt; items&#13;processed in &lt;em&gt;bq&lt;/em&gt; using each of the &lt;em&gt;Q&lt;/em&gt; parameters.  &lt;/p&gt;&#13;&#13;&lt;p&gt;&#13;The problem then is how to compare &lt;em&gt;AnPp&lt;/em&gt; against the all&#13;&lt;em&gt;BnQq&lt;/em&gt; - but notice that &lt;em&gt;An&lt;/em&gt; and &lt;em&gt;Bn&lt;/em&gt; have to&#13;match. The normal crossproduct would compare all &lt;em&gt;AaPp&lt;/em&gt; against&#13;all &lt;em&gt;BbQq&lt;/em&gt; - but we want to restrict the iteration strategy. We&#13;can't use the &lt;strong&gt;dot product&lt;/strong&gt; directly because for a given&#13;patient n we want to compare all &lt;em&gt;P&lt;/em&gt;s against all &lt;em&gt;Q&lt;/em&gt;s&#13;using the &lt;strong&gt;cross product&lt;/strong&gt;.  &lt;/p&gt;&#13;&#13;&lt;p&gt;&#13;This is solved in t2 using &lt;strong&gt;staged iteration&lt;/strong&gt;, but here&#13;is a hack showing how this can be achieved in t1 using a &lt;strong&gt;nested&#13;workflow&lt;/strong&gt;. The nested workflow basically &amp;quot;stops&amp;quot; the&#13;iteration at list level, due to the &lt;em&gt;echo_lists&lt;/em&gt; inside that&#13;makes the nested workflow excpect lists.&#13;&lt;/p&gt;&#13;&#13;&lt;p&gt;&#13;There's explicit &lt;code&gt;crossproduct(p,a)&lt;/code&gt; strategy set on&#13;&lt;em&gt;ap&lt;/em&gt; and &lt;code&gt;crossproduct(q,b)&lt;/code&gt; on &lt;em&gt;bq&lt;/em&gt; to make&#13;sure they output with the &lt;em&gt;a&lt;/em&gt;/&lt;em&gt;b&lt;/em&gt; iteration at the highest&#13;level lists, ie. &lt;em&gt;ap&lt;/em&gt; outputs:&lt;/p&gt;&#13;&#13;&lt;pre&gt;&#13;[  [ a0p0, a0p1], &#13;   [ a1p0, a1p1],&#13;   [ a2p0, a2p1]&#13;]&#13;&lt;/pre&gt;&#13;&#13;&lt;p&gt;So the top level lists from &lt;em&gt;ap&lt;/em&gt; corresponds to each item of&#13;&lt;em&gt;A&lt;/em&gt;. The same trick applies to &lt;em&gt;bq&lt;/em&gt; - if we don't specify&#13;this the implicit iteration might output the opposite with the highest&#13;list corresponding to the &lt;em&gt;P&lt;/em&gt;s and &lt;em&gt;Q&lt;/em&gt;s. &lt;em&gt;(Hint: Simply&#13;drag &lt;/em&gt;p&lt;em&gt; or &lt;/em&gt;a&lt;em&gt; within the iteration strategy editor to&#13;change the order)&lt;/em&gt; &lt;/p&gt;&#13;&#13;&lt;p&gt;&#13;The second part is to use a nested workflow that takes the outputs from&#13;&lt;em&gt;ap&lt;/em&gt; and &lt;em&gt;bq&lt;/em&gt;, but through the &lt;em&gt;Echo list&lt;/em&gt; local&#13;worker. This worker doesn't do anything except it forces the nested&#13;workflow to take a list of items as inputs instead of single inputs.&#13;&lt;/p&gt;&#13;&lt;p&gt;&#13;Hence we can set a &lt;code&gt;dotproduct(pq, ap)&lt;/code&gt; on the processor for&#13;the nested workflow &lt;em&gt;apbq_iter&lt;/em&gt; - since &lt;strong&gt;this nested&#13;workflow consumes lists&lt;/strong&gt; at both ports this means it will be&#13;iterated over with these inputs:&lt;/p&gt;&#13;&#13;&lt;pre&gt;&#13;ap = [ a0p0, a0p1]    bq = [b0q0, b0q1, b0q2, b0q3]&#13;ap = [ a1p0, a1p1]    bq = [b1q0, b1q1, b1q2, b1q3]&#13;ap = [ a2p0, a2p1]    bq = [b2q0, b2q1, b2q2, b2q3]&#13;&lt;/pre&gt;&#13;&#13;&lt;p&gt; Inside the nested workflow there's the normal &lt;code&gt;crossproduct(pq,&#13;ap)&lt;/code&gt; so that it can do an all-to-all comparison.&lt;/p&gt;&#13;&#13;&lt;p&gt;&lt;em&gt;(The beanshell inside &lt;/em&gt;apbq&lt;em&gt; here actually only returns&#13;the string &lt;code&gt;ap+bq&lt;/code&gt;, &lt;/em&gt;ap&lt;em&gt; returns &lt;code&gt;a+p&lt;/code&gt; and&#13;&lt;/em&gt;bq&lt;em&gt; returns &lt;code&gt;p+q&lt;/code&gt;, but assume that instead there was&#13;real services invoked for each of these processors doing some kind of&#13;filtering/comparison operation using the given parameters, and that&#13;&lt;code&gt;a0p0&lt;/code&gt; etc. are the outputs of those operations.)&lt;/em&gt;&#13;&lt;/p&gt;&#13;&#13;&lt;p&gt;&#13;With this hack we can run a &lt;strong&gt;dotproduct&lt;/strong&gt; for the&#13;&lt;strong&gt;outer&lt;/strong&gt; list, and a &lt;strong&gt;crossproduct&lt;/strong&gt; for the&#13;&lt;strong&gt;inner&lt;/strong&gt; list.&#13;&lt;/p&gt;&#13;&#13;&lt;p&gt;&#13;The output of running this workflow should be:&#13;&lt;/p&gt;&#13;&#13;&lt;pre&gt;&#13;{&#13;  [ (a0p0b0q0, a0p0b0q1, a0p0b0q2, a0p0b0q3),&#13;    (a0p1b0q0, a0p1b0q1, a0p1b0q2, a0p1b0q3)&#13;  ],&#13;  [ (a1p0b1q0, a1p0b1q1, a1p0b1q2, a1p0b1q3),&#13;    (a1p1b1q0, a1p1b1q1, a1p1b1q2, a1p1b1q3)&#13;  ],&#13;  [ (a2p0b2q0, a2p0b2q1, a2p0b2q2, a2p0b2q3),&#13;    (a2p1b2q0, a2p1b2q1, a2p1b2q2, a2p1b2q3)&#13;  ]&#13;}&#13;&#13;&lt;/pre&gt;&#13;&#13;&#13;&lt;p&gt;&#13;So in the final output &lt;code&gt;{}&lt;/code&gt; (depth=3) there's three big&#13;&lt;code&gt;[]&lt;/code&gt; lists of depth 2, corresponding to&#13;&lt;code&gt;a0/&lt;/code&gt;&lt;code&gt;b0&lt;/code&gt;, &lt;code&gt;a1&lt;/code&gt;/&lt;code&gt;b1&lt;/code&gt; and&#13;&lt;code&gt;b2&lt;/code&gt;/&lt;code&gt;b2&lt;/code&gt;. Within each of these are two&#13;&lt;code&gt; ()&lt;/code&gt; lists of depth 1 corresponding to &lt;code&gt;p0&lt;/code&gt; and&#13;&lt;code&gt;p1&lt;/code&gt;. The content of these lists (depth 0) are the&#13;actual items returned from &lt;em&gt;apbq&lt;/em&gt; - one for each&#13;of &lt;code&gt;q0,q1,q2,q3&lt;/code&gt;.&#13;&lt;/p&gt;</description>  <type resource="http://www.myexperiment.org/content_types/1" uri="http://www.myexperiment.org/type.xml?id=1" id="1">Taverna 1</type>  <uploader resource="http://www.myexperiment.org/users/5" uri="http://www.myexperiment.org/user.xml?id=5" id="5">Stian Soiland-Reyes</uploader>  <created-at>2008-05-07 12:10:27 UTC</created-at>  <preview>http://www.myexperiment.org/workflows/185/versions/1/previews/full</preview>  <svg>http://www.myexperiment.org/workflows/185/versions/1/previews/svg</svg>  <license-type resource="http://www.myexperiment.org/licenses/2" uri="http://www.myexperiment.org/license.xml?id=2" id="2">by-sa</license-type>  <content-uri>https://myexperiment.org/workflows/185/download/Staged_iteration_strategy-v.xml</content-uri>  <content-type>application/vnd.taverna.scufl+xml</content-type>  <tags>    <tag uri="http://www.myexperiment.org/tag.xml?id=652" resource="http://www.myexperiment.org/tags/652" id="652">iteration</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=771" resource="http://www.myexperiment.org/tags/771" id="771">strategy</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=772" resource="http://www.myexperiment.org/tags/772" id="772">dotproduct</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=773" resource="http://www.myexperiment.org/tags/773" id="773">crossproduct</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=774" resource="http://www.myexperiment.org/tags/774" id="774">staged</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=663" resource="http://www.myexperiment.org/tags/663" id="663">taverna</tag>    <tag uri="http://www.myexperiment.org/tag.xml?id=555" resource="http://www.myexperiment.org/tags/555" id="555">example</tag>  </tags></workflow>